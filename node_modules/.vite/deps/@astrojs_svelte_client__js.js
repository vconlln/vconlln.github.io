import "./chunk-EQCVQC35.js";

// node_modules/@astrojs/svelte/client.js
var noop = () => {
};
var originalConsoleWarning;
var consoleFilterRefs = 0;
var existingApplications = /* @__PURE__ */ new WeakMap();
var client_default = (element) => {
  return (Component, props, slotted, { client }) => {
    if (!element.hasAttribute("ssr")) return;
    const slots = {};
    for (const [key, value] of Object.entries(slotted)) {
      slots[key] = createSlotDefinition(key, value);
    }
    try {
      if (import.meta.env.DEV) useConsoleFilter();
      if (existingApplications.has(element)) {
        existingApplications.get(element).$set({ ...props, $$slots: slots, $$scope: { ctx: [] } });
      } else {
        const component = new Component({
          target: element,
          props: {
            ...props,
            $$slots: slots,
            $$scope: { ctx: [] }
          },
          hydrate: client !== "only",
          $$inline: true
        });
        existingApplications.set(element, component);
        element.addEventListener("astro:unmount", () => component.$destroy(), { once: true });
      }
    } finally {
      if (import.meta.env.DEV) finishUsingConsoleFilter();
    }
  };
};
function createSlotDefinition(key, children) {
  let parent;
  return [
    () => ({
      // mount
      m(target) {
        parent = target;
        target.insertAdjacentHTML(
          "beforeend",
          `<astro-slot${key === "default" ? "" : ` name="${key}"`}>${children}</astro-slot>`
        );
      },
      // create
      c: noop,
      // hydrate
      l: noop,
      // destroy
      d() {
        if (!parent) return;
        const slot = parent.querySelector(
          `astro-slot${key === "default" ? ":not([name])" : `[name="${key}"]`}`
        );
        if (slot) slot.remove();
      }
    }),
    noop,
    noop
  ];
}
function useConsoleFilter() {
  consoleFilterRefs++;
  if (!originalConsoleWarning) {
    originalConsoleWarning = console.warn;
    try {
      console.warn = filteredConsoleWarning;
    } catch {
    }
  }
}
function finishUsingConsoleFilter() {
  consoleFilterRefs--;
}
function filteredConsoleWarning(msg, ...rest) {
  if (consoleFilterRefs > 0 && typeof msg === "string") {
    const isKnownSvelteError = msg.endsWith("was created with unknown prop 'class'") || msg.includes("was created with unknown prop 'data-astro-cid");
    if (isKnownSvelteError) return;
  }
  originalConsoleWarning(msg, ...rest);
}
export {
  client_default as default
};
//# sourceMappingURL=@astrojs_svelte_client__js.js.map
